# -*- coding: utf-8 -*-
"""
Created on Sun Mar  7 17:44:49 2021

@author: oksan
"""


import numpy as np
import pandas as pd
from scipy.stats import norm
from datetime import datetime, date

N = norm.cdf

def bs_call(S, K, T, r, vol):
    d1 = (np.log(S/K) + (r + 0.5*vol**2)*T) / (vol*np.sqrt(T))
    d2 = d1 - vol * np.sqrt(T)
    price = S * norm.cdf(d1) - np.exp(-r * T) * K * norm.cdf(d2)
    return price

def bs_vega(S, K, T, r, sigma):
    d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
    vega = S * norm.pdf(d1) * np.sqrt(T)
    return vega

def find_vol(target_value, S, K, T, r, *args):
    MAX_ITERATIONS = 200
    PRECISION = 1.0e-5
    sigma = 0.5
    for i in range(0, MAX_ITERATIONS):
        price = bs_call(S, K, T, r, sigma)
        vega = bs_vega(S, K, T, r, sigma)
        diff = target_value - price  # our root
        if (abs(diff) < PRECISION):
            return sigma
        sigma = sigma + diff/vega # f(x) / f'(x)
    return sigma # value wasn't found, return best guess so far



S = 27736
K = np.array([26250,26500,26750,27000,27250,27500,27750,28000,28250,28500,28750,29000,29250,29500])
bid_call = np.array([1984,1799,1622,1454,1294,1145,1005,875,756,647,549,461,383,314])
offer_call = bid_call*0.95
offer_put = np.array([498,563,636,718,808,909,1019,1139,1270,1411,1563,1725,1897,2078])
bid_put = offer_put*0.95
expiry = '14-04-2021'
r = 0
T = (datetime.strptime(expiry, "%d-%m-%Y") - datetime.utcnow()).days / 365


array_gen = [K,bid_call,offer_call,bid_put,offer_put]
df = pd.DataFrame(data = array_gen)

for k in range(0,len(K)):
    iv_call = find_vol(real_prices_call[k],S, K[k], T, r)
    iv_put = find_vol(real_prices_call[k],S, K[k], T, r)
    
T = (datetime.strptime(expiry, "%d-%m-%Y") - datetime.utcnow()).days / 365

iv = find_vol(call_price, S, K, T, r)
call = bs_call(S, K, T, r, iv)


Computing a single value is quick enough

S = 100
K = 100
T = 11
r = 0.01
vol = 0.25

V_market = bs_call(S, K, T, r, vol)
implied_vol = find_vol(V_market, S, K, T, r)

print ('Implied vol: %.2f%%' % (implied_vol * 100))
print ('Market price = %.2f' % V_market)
print ('Model price = %.2f' % bs_call(S, K, T, r, implied_vol))
